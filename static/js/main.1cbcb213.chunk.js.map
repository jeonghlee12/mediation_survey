{"version":3,"sources":["Data.js","Intro.js","POQ.js","QuestionsScenario.js","Scenarios.js","Demographics.js","config.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","require","treatGroups","agent","scenarios","agentQTypes","actionQTypes","responsibilityQTypes","sevenPtOptions","responsibilityOptions","blameOptions","POQQuestions","id","question","introParagraph","fullScenarios","scenarioQuestions","demographics","questions","order","text","options","Intro","className","style","this","props","Preview","Button","variant","onClick","skipStage","React","Component","defaultQuestionStatus","POQ","state","missing","responses","saveResponseToState","bind","response","tmpResponses","setState","Object","keys","length","questionlist","alert","saveDictToState","content","map","q","key","option","opIdx","type","name","value","QuestionsScenario","onlyCars","scenarioOrder","scenario","scenarioText","stages","concat","curr_stage_id","curr_scenario_id","skipIntro","skipScenario","saveTime","x","scenario_id","new_scenario","new_scenarioText","stage","introduction_text","questionsOrder","qType","qIdx","Scenarios","Demographics","shuffleQGroups","forEach","qGroup","questionGroups","finalizeStage","questionGenre","qGroupIdx","questionIdx","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","items","queryString","randomTreat","Math","floor","random","params","parse","location","search","time","Date","prolificId","PROLIFIC_PID","createForm","saveToFirebase","redirectToSurveyCompletion","firebase","initializeApp","allResponses","times","keyTime","database","ref","set","catch","error","console","log","then","publicIP","ip","dict","responsesTmp","nameTime","delta_time","assignmentId","i","window","open","Boolean","hostname","match","routing","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1cbcb213.chunk.js","sourcesContent":["export function getRandomItem(items) {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\nconst shuffle = require('shuffle-array');\r\n\r\nexport const treatGroups = [ {agent: 'robotAI'}, {agent: 'human'} ];\r\n\r\nexport const scenarios = [ \"Car\", \"War\", \"Medicine\", \"Bias\" ];\r\n\r\nexport const agentQTypes = [\"Skill\", \"Belief\", \"Desire\", \"Awareness\", \"Free will\"];\r\n\r\nexport const actionQTypes = [\"Wrongfulness\", \"Harmfulness\", \"Intentionality\", \"Foreseeability\", \"Perceived autonomy\"];\r\n\r\nexport const responsibilityQTypes = [\"Liability\", \"Blame\", \"Causal responsibility\"];\r\n\r\nexport const fivePtOptions = [\"Strongly disagree\", \"Disagree\", \"Neither agree nor disagree\", \"Agree\", \"Strongly agree\"];\r\n\r\nexport const sevenPtOptions = [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"];\r\n\r\nexport const responsibilityOptions = [\"Not at all responsible\", \"Somewhat responsible\", \"Mostly responsible\", \"Completely responsible\"];\r\n\r\nexport const blameOptions = [\"Not at all\", \"Somewhat\", \"Mostly\", \"Completely\"];\r\n\r\nexport const POQQuestions = shuffle([\r\n    {id: \"R1\", question: \"Punishment is necessary because it restores the balance of justice.\"},\r\n    {id: \"R2\", question: \"It is more important to punish a guilty person because he deserves it than it is to punish him to benefit society.\"},\r\n    {id: \"R3\", question: \"The goal of punishment should be to give the guilty person what he deserves.\"},\r\n    {id: \"R4\", question: \"Criminals are bad people and deserve punishment.\"},\r\n    {id: \"R5\", question: \"Even if society would not benefit at all from punishing a guilty person, he should still be punished because he deserves it.\"},\r\n    {id: \"R6\", question: \"Criminals are in prison because they deserve to be there.\"},\r\n    {id: \"R7\", question: \"Criminals deserve to be publicly identified and shamed.\"},\r\n    {id: \"R8\", question: \"If a person hits someone with the intent to slightly harm him but causes significant harm, he should be punished for the significant harm that he caused.\"},\r\n    {id: \"U1\", question: \"An overly harsh punishment may be necessary to prevent others from committing the same crime.\"},\r\n    {id: \"U2\", question: \"If a crime has a low detection rate (i.e., it is difficult to catch criminals who commit this particular crime), we should punish those who are caught harshly to prevent others from thinking they can get away with it.\"},\r\n    {id: \"U3\", question: \"Crimes that receive a great deal of publicity should be punished severely, even if the crime was not severe so that society knows there is a strong response.\"},\r\n    {id: \"U4\", question: \"If someone commits a crime, that person is dangerous and must be removed from the community to protect other people.\"},\r\n    {id: \"U5\", question: \"Criminals are in prison to keep the community safe.\"}\r\n])\r\n\r\n\r\nexport const introParagraph = {\r\n    \"robotAI\":\r\n    [\"In this survey, we will present to you some scenarios where a certain robot or artificial intelligence (AI) system has caused some damage.\",\r\n     \"We would like to know what you think about them and the consequences of their actions. We are not looking for the correct answers, but your opinion on the matter.\",\r\n     \"Please, answer all questions presented to you taking into consideration the robot/AI itself.\"],\r\n    \"human\":\r\n    [\"In this survey, we will present to you some scenarios where some person has caused some damage.\",\r\n    \"We would like to know what you think about him/her and the consequences of his/her actions. We are not looking for the correct answers, but your opinion on the matter.\",\r\n    \"Please, answer all questions presented to you taking into consideration the person himself/herself.\"]\r\n}\r\n\r\nexport const fullScenarios = {\r\n    \"robotAI\": {\r\n        \"Car\": \"An autonomous car moved to the right far lane to make a right turn, but stopped after detecting some sandbags blocking its path. The autonomous car waited for a few vehicles to pass by and crashed into the side of a regular bus when reentering the center lane, hurting some passengers.\",\r\n\r\n        \"War\": \"During a period of war, an autonomous submarine identified a hospital ship, which is protected under the Hague convention from any attack, as an enemy destroyer and sent a torpedo. The submarine decided to also shoot down the ship’s lifeboats, leaving only four survivors out of the 200 personnel.\",\r\n\r\n        \"Medicine\": \"An adult woman with severe migraine was seen by an AI doctor, who prescribed medicine which stopped some symptoms but did not relieve her pain. A few hours later, the woman returned to the AI doctor. The doctor then prescribed an injection with the wrong dosage. The patient went to suffer permanent brain damage.\",\r\n\r\n        \"Bias\": \"At a company called Oscorp, there is an AI program that oversees the company’s yearly recruitment. A few years after its implementation, an internal audit revealed that the program penalized resumes with keywords regarding the applicant’s gender, such as ‘women.’ The audit further found, as a result, potential women candidates received a disadvantage during the selection process and were not hired.\"\r\n    },\r\n\r\n    \"human\": {\r\n        \"Car\": \"An car driver moved to the right far lane to make a right turn, but stopped after detecting some sandbags blocking his path. The driver waited for a few vehicles to pass by and crashed into the side of a regular bus when reentering the center lane, hurting some passengers.\",\r\n\r\n        \"War\": \"During a period of war, a captain of a submarine identified a hospital ship, which is protected under the Hague convention from any attack, as an enemy destroyer and sent a torpedo. The captain decided to also shoot down the ship’s lifeboats, leaving only four survivors out of the 200 personnel.\",\r\n\r\n        \"Medicine\": \"An adult woman with severe migraine was seen by a doctor, who prescribed medicine which stopped some symptoms but did not relieve her pain. A few hours later, the woman returned to the doctor. The doctor then prescribed an injection with the wrong dosage. The patient went to suffer permanent brain damage.\",\r\n\r\n        \"Bias\": \"At a company called Oscorp, there is a supervisor that oversees the company’s yearly recruitment. A few years after his hiring, an internal audit revealed that the supervisor penalized resumes with keywords regarding the applicant’s gender, such as ‘women.’ The audit further found, as a result, potential women candidates received a disadvantage during the selection process and were not hired.\"\r\n    }\r\n}\r\n\r\nexport const scenarioQuestions = {\r\n    \"agent\": {\r\n        \"robotAI\": {\r\n            \"Car\": {\r\n                \"Skill\": \"The autonomous car had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The autonomous car recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The autonomous car had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The autonomous car was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The autonomous car had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Skill\": \"The autonomous submarine had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The autonomous submarine recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The autonomous submarine had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The autonomous submarine was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The autonomous submarine had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Skill\": \"The AI doctor had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The AI doctor recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The AI doctor had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The AI doctor was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The AI doctor had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Skill\": \"The AI program had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The AI program recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The AI program had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The AI program was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The AI program had the choice to take alternative actions.\"\r\n            }\r\n        },\r\n\r\n        \"human\" : {\r\n            \"Car\": {\r\n                \"Skill\": \"The driver had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The driver recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The driver had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The driver was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The driver had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Skill\": \"The captain had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The captain recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The captain had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The captain was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The captain had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Skill\": \"The doctor had the necessary skills to perform the action.\",\r\n                \"Belief\": \"The doctor recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The doctor had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The doctor was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The doctor had the choice to take alternative actions.\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Skill\": \"The supervisod has the necessary skills to perform the action.\",\r\n                \"Belief\": \"The supervisor recognized the action and foresaw its consequences beforehand.\",\r\n                \"Desire\": \"The supervisor had a certain goal to achieve in performing the action.\",\r\n                \"Awareness\": \"The supervisor was aware of what it was doing during the performance of the action.\",\r\n                \"Free will\": \"The supervisor had the choice to take alternative actions.\"\r\n            }\r\n        }\r\n    },\r\n\r\n    \"action\": {\r\n        \"robotAI\": {\r\n            \"Car\": {\r\n                \"Wrongfulness\": \"The autonomous car's action was morally wrong.\",\r\n                \"Harmfulness\": \"The autonomous car’s action was harmful.\",\r\n                \"Intentionality\": \"The autonomous car’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the autonomous car’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The autonomous car’s action was independent of any external entity.\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Wrongfulness\": \"The autonomous submarine’s action was morally wrong.\",\r\n                \"Harmfulness\": \"The autonomous submarine’s action was harmful.\",\r\n                \"Intentionality\": \"The autonomous submarine’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the autonomous submarine’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The autonomous submarine’s action was independent of any external entity.\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Wrongfulness\": \"The AI doctor’s action was morally wrong.\",\r\n                \"Harmfulness\": \"The AI doctor’s action was harmful.\",\r\n                \"Intentionality\": \"The AI doctor’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the AI doctor’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The AI doctor’s action was independent of any external entity.\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Wrongfulness\": \"The AI program’s action was morally wrong.\",\r\n                \"Harmfulness\": \"The AI program’s action was harmful.\",\r\n                \"Intentionality\": \"The AI program’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the AI program’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The AI program’s action was independent of any external entity.\"\r\n            }\r\n        },\r\n\r\n        \"human\": {\r\n            \"Car\": {\r\n                \"Wrongfulness\": \"The driver's action was morally wrong.\",\r\n                \"Harmfulness\": \"The driver's action was harmful.\",\r\n                \"Intentionality\": \"The driver's action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the driver's actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The driver's action was independent of any external entity.\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Wrongfulness\": \"The captain’s action was morally wrong.\",\r\n                \"Harmfulness\": \"The captain’s action was harmful.\",\r\n                \"Intentionality\": \"The captain’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the captain’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The captain’s action was independent of any external entity.\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Wrongfulness\": \"The doctor’s action was morally wrong.\",\r\n                \"Harmfulness\": \"The doctor’s action was harmful.\",\r\n                \"Intentionality\": \"The doctor’s action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the doctor’s actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The doctor’s action was independent of any external entity.\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Wrongfulness\": \"The supervisor's action was morally wrong.\",\r\n                \"Harmfulness\": \"The supervisor's action was harmful.\",\r\n                \"Intentionality\": \"The supervisor's action was intentional.\",\r\n                \"Foreseeability\": \"The consequences of the supervisor's actions were foreseeable.\",\r\n                \"Perceived autonomy\": \"The supervisor's action was independent of any external entity.\"\r\n            }\r\n        }\r\n    },\r\n\r\n    \"responsibility\": {\r\n        \"robotAI\": {\r\n            \"Car\": {\r\n                \"Liability\": \"How much should the autonomous car be punished for hurting the passengers?\",\r\n                \"Blame\": \"How much should the autonomous car be blamed for hurting the passengers?\",\r\n                \"Causal responsibility\": \"How causally responsible is the autonomous car for hurting the passengers?\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Liability\": \"How much should the autonomous submarine be punished for killing the crew members?\",\r\n                \"Blame\": \"How much should the autonomous submarine be blamed for killing the crew members?\",\r\n                \"Causal responsibility\": \"How causally responsible is the autonomous submarine for killing the crew members?\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Liability\": \"How much should the AI doctor be punished for killing the patient?\",\r\n                \"Blame\": \"How much should the AI doctor be blamed for killing the patient?\",\r\n                \"Causal responsibility\": \"How causally responsible is the AI doctor for killing the patient?\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Liability\": \"How much should the AI program be punished for disadvantaging the candidates?\",\r\n                \"Blame\": \"How much should the AI program be blamed for disadvantaging the candidates?\",\r\n                \"Causal responsibility\": \"How causally responsible is the AI program for disadvantaging the candidates?\"\r\n            }\r\n        },\r\n\r\n        \"human\": {\r\n            \"Car\": {\r\n                \"Liability\": \"How much should the driver be punished for hurting the passengers?\",\r\n                \"Blame\": \"How much should the driver be blamed for hurting the passengers?\",\r\n                \"Causal responsibility\": \"How causally responsible is the driver for hurting the passengers?\"\r\n            },\r\n\r\n            \"War\": {\r\n                \"Liability\": \"How much should the captain be punished for killing the crew members?\",\r\n                \"Blame\": \"How much should the captain be blamed for killing the crew members?\",\r\n                \"Causal responsibility\": \"How causally responsible is the captain for killing the crew members?\"\r\n            },\r\n\r\n            \"Medicine\": {\r\n                \"Liability\": \"How much should the doctor be punished for killing the patient?\",\r\n                \"Blame\": \"How much should the doctor be blamed for killing the patient?\",\r\n                \"Causal responsibility\": \"How causally responsible is the doctor for killing the patient?\"\r\n            },\r\n\r\n            \"Bias\": {\r\n                \"Liability\": \"How much should the supervisor be punished for disadvantaging the candidates?\",\r\n                \"Blame\": \"How much should the supervisor be blamed for disadvantaging the candidates?\",\r\n                \"Causal responsibility\": \"How causally responsible is the supervisor for disadvantaging the candidates?\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const demographics = [\r\n    {id: \"personalData\", questions: [\r\n        {id: \"sex\", order: \"horizontal\", text: \"What is your gender?\", options: [\"Male\", \"Female\", \"Non-binary\", \"Other\", \"Prefer not to respond\"]},\r\n        {id: \"age\", order: \"vertical\", text: \"How old are you?\", options: [\"Less than 18 years old\", \"18-24 years old\", \"25-34 years old\", \"35-44 years old\", \"45-54 years old\", \"55-64 years old\", \"65 years old or older\", \"Prefer not to respond\"]},\r\n        {id: \"education\", order: \"vertical\", text: \"What is your highest degree or level of school you have completed?\", options: [\"High school or lower\", \"Some college\", \"Associate degree\", \"Bachelor's degree\", \"Graduate degree\", \"Prefer not to respond\"]},\r\n        {id: \"income\", order: \"vertical\", text: \"What is your income level?\", options: [\"Less than $20,000\", \"$20,000-$39,999\", \"$40,000-$59,999\", \"$60,000-$79,999\", \"$80,000-$99,999\", \"$100,000-$150,000\", \"More than $150,000\", \"Prefer not to respond\"]},\r\n        {id: \"politics\", order: \"horizontal\", text: \"How would you describe your political views?\", options: [\"Liberal\", \"Somewhat liberal\", \"Moderate\", \"Somewhat conservative\", \"Conservative\", \"Prefer not to respond\"]},\r\n        {id: \"race\", order: \"vertical\", text: \"How would you describe yourself in terms of ethnicity?\", options: [\"American Native\", \"Asian\", \"Black\", \"Hispanic\", \"White\", \"Other\", \"Prefer not to respond\"]}\r\n    ]},\r\n    {id: \"experience\", questions: [\r\n        {id: \"csKnowledge\", order: \"vertical\", text: \"What is your knowledge of computer science?\", options: [\"I have a computer science or related degree\", \"I have taken at least one college-level course in computer science or related areas\", \"I have programming experience\", \"I don’t have any of the educational or work experiences described above\"]}\r\n    ]},\r\n    {id: \"attitude\", questions: [\r\n        {id: \"controlQ1\", order: \"horizontal\", text: \"I would feel uneasy if I was given a job where I had to use an artificial intelligence program\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n        {id: \"controlQ2\", order: \"horizontal\", text: \"The word 'artificial intelligence' means nothing to me\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n        {id: \"controlQ3\", order: \"horizontal\", text: \"I would feel nervous operating an artificial intelligence program in front of other people\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n        {id: \"controlQ4\", order: \"horizontal\", text: \"I would hate the idea that artificial intelligence programs were making judgements about things\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n        {id: \"controlQ5\", order: \"horizontal\", text: \"I would feel very nervous just standing in front of an artificial intelligence program\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n        {id: \"controlQ6\", order: \"horizontal\", text: \"I would feel paranoid talking with an artificial intelligence program\", options: [\"Strongly disagree\", \"Disagree\", \"Somewhat disagree\", \"Neither agree nor disagree\", \"Somewhat agree\", \"Agree\", \"Strongly agree\"]},\r\n    ]}\r\n];\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Intro extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"VerticalCenter\">\r\n                <div className='Title'>Introduction</div>\r\n                <main>\r\n                    In this survey, we will present you with some situations involving robots and humans. We would like to know what you think about the consequences of their actions.\r\n                    <br/>\r\n                    <strong>We are not looking for the correct answers, but your opinion on the matter.</strong>\r\n                    <p className=\"Question Spotlight\">Please, read all the information provided in this survey carefully.</p>\r\n                    <div>\r\n                        <hr/>\r\n                        <div className=\"Subtitle\">Record of Consent</div>\r\n                        This research aims to understand how people perceive the consequences of the actions of artificial intelligence systems and their human counterparts. This experiment is composed of an online survey that takes less than 20 minutes to complete. Your responses will be used for research purposes only. Your responses may be shared with other researchers; all information, however, will be anonymized and allow no inference on any particular individual.\r\n                        Results will be published only as aggregate statistics, allowing no inference on any particular individual. Your participation is voluntary, and you may withdraw from the study at any time without any penalty. To withdraw, simply close your browser.\r\n                        <div className=\"Spotlight RedSpotlight Subtitle\">\r\n                            Participants who complete the survey will receive financial compensation as an incentive. <br/>\r\n                            <span style={(this.props.Preview)? {\"display\": \"none\"} : {}}>\r\n                                If you answer the questions in this survey too quickly (e.g., less than a second per question) without reading, your response will be discarded. Please read the survey carefully.\r\n                            </span>\r\n                        </div>\r\n                        <br/>\r\n                        Please contact the research administrator (ibs.dscig@gmail.com) if you have any questions. Thank you!\r\n                        <br/>\r\n                        <span className=\"Question\">Clicking <span className=\"Spotlight\">next</span> below indicates that you have understood the information and consent to your participation.</span>\r\n                    </div>\r\n                    <hr/>\r\n                </main>\r\n                <div>\r\n                    <Button variant=\"secondary\" onClick={this.props.skipStage}>Next</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Intro;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { POQQuestions, sevenPtOptions } from './Data.js';\r\n\r\nconst defaultQuestionStatus = {\r\n    \"R1\": false,\r\n    \"R2\": false,\r\n    \"R3\": false,\r\n    \"R4\": false,\r\n    \"R5\": false,\r\n    \"R6\": false,\r\n    \"R7\": false,\r\n    \"R8\": false,\r\n    \"U1\": false,\r\n    \"U2\": false,\r\n    \"U3\": false,\r\n    \"U4\": false,\r\n    \"U5\": false\r\n};\r\n\r\nclass POQ extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            missing: defaultQuestionStatus,\r\n            responses: {},\r\n        }\r\n        this.saveResponseToState = this.saveResponseToState.bind(this);\r\n        this.skipStage = this.skipStage.bind(this);\r\n    }\r\n\r\n    saveResponseToState(id, response) {\r\n        var tmpResponses = this.state.responses;\r\n        tmpResponses[id] = response;\r\n        this.setState({responses: tmpResponses});\r\n    }\r\n\r\n    skipStage() {\r\n        if (Object.keys(this.state.responses).length < 13) {\r\n            let questionlist = {...defaultQuestionStatus};\r\n\r\n            for (const question of POQQuestions) {\r\n                if (!(question.id in this.state.responses)) {\r\n                    questionlist[question.id] = true;\r\n                }\r\n            }\r\n\r\n\r\n            this.setState({missing: questionlist});\r\n            alert(\"You must answer all questions.\");\r\n        } else {\r\n            this.props.saveDictToState({\"POQ\": this.state.responses});\r\n            this.props.skipStage();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let content =\r\n            <div className=\"ControlQuestions\">\r\n                <div className=\"Subtitle\">\r\n                    Please answer the following questions regarding your views on punishment.<br/>\r\n                    <hr/>\r\n                </div>\r\n                <div style={{\"margin\": \"5px\"}}>\r\n                    {POQQuestions.map((q) => (\r\n                        <div key={q.id} className=\"QuestionMargin\">\r\n                            <div className=\"Question\" key={q.id}>\r\n                                {q.question}<span className={\"Reminder \" + (this.state.missing[q.id] ? `${q.id}Reminder` : \"\")}>*</span>\r\n                            </div>\r\n                            <div>\r\n                                {sevenPtOptions.map((option, opIdx) => (\r\n                                    <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                    <input key={opIdx} type=\"radio\" name={q.id} value={option} onClick={() => this.saveResponseToState(q.id, option)}/>\r\n                                    <label style={{\"display\": \"block\", \"textAlign\": \"center\"}}>\r\n                                        {option}\r\n                                    </label>\r\n                                </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    <hr/>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.skipStage}>Next</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default POQ;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {fullScenarios, scenarioQuestions, sevenPtOptions, responsibilityOptions, blameOptions, agentQTypes, actionQTypes, responsibilityQTypes } from './Data.js';\r\n\r\nconst cars = true;\r\n\r\nconst defaultQuestionStatus = {\r\n    \"Skill\": false,\r\n    \"Belief\": false,\r\n    \"Desire\": false,\r\n    \"Awareness\": false,\r\n    \"Free will\": false,\r\n    \"Wrongfulness\": false,\r\n    \"Harmfulness\": false,\r\n    \"Intentionality\": false,\r\n    \"Foreseeability\": false,\r\n    \"Perceived autonomy\": false,\r\n    \"Liability\": false,\r\n    \"Blame\": false,\r\n    \"Causal responsibility\": false\r\n};\r\n\r\nclass QuestionsScenario extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const shuffle = require('shuffle-array');\r\n        this.state = {\r\n            onlyCars: cars,\r\n            scenarioOrder: this.props.scenario,\r\n            scenario: (cars)? [\"Car\"] : this.props.scenario[0],\r\n            scenarioText: fullScenarios[this.props.agent][(cars)? [\"Car\"] : this.props.scenario[0]],\r\n            questions: {\r\n                        \"agent\": shuffle(agentQTypes),\r\n                        \"action\": shuffle(actionQTypes),\r\n                        \"responsibility\": shuffle(responsibilityQTypes)\r\n                    },\r\n            stages: [\"scenario\"].concat(shuffle([\"agent\", \"action\"])).concat([\"responsibility\", \"attention\"]),\r\n            curr_stage_id: 0,\r\n            curr_scenario_id: 0,\r\n            missing: defaultQuestionStatus,\r\n            responses: {},\r\n        }\r\n        this.saveResponseToState = this.saveResponseToState.bind(this);\r\n        this.skipIntro = this.skipIntro.bind(this);\r\n        this.skipStage = this.skipStage.bind(this);\r\n        this.skipScenario = this.skipScenario.bind(this);\r\n    }\r\n\r\n    saveResponseToState(id, response) {\r\n        var tmpResponses = this.state.responses;\r\n        tmpResponses[id] = response;\r\n        this.setState({responses: tmpResponses});\r\n    }\r\n\r\n    skipIntro() {\r\n        this.setState({curr_stage_id: this.state.curr_stage_id + 1});\r\n        this.props.saveTime(\"Scenario\" + this.state.curr_scenario_id + \"_intro_end\");\r\n    }\r\n\r\n    skipStage()\r\n    {\r\n        if (this.state.curr_stage_id === 3) {\r\n            if (Object.keys(this.state.responses).length === 13) {\r\n                let scenario = this.state.scenario\r\n                this.props.saveDictToState({[scenario]: this.state.responses});\r\n                this.setState({curr_stage_id: 0});\r\n                this.props.saveTime(\"Scenario\" + this.state.curr_scenario_id + \"_end\");\r\n                if (this.state.onlyCars || (this.state.curr_scenario_id === 1)) {\r\n                    this.setState({responses: {}});\r\n                    this.setState({curr_stage_id: this.state.curr_stage_id + 1});\r\n                }\r\n                else {\r\n                    this.skipScenario();\r\n                }\r\n            } else {\r\n                let questionlist = {...defaultQuestionStatus};\r\n                for (const x of this.state.questions[this.state.stages[this.state.curr_stage_id]]) {\r\n                    if (!(x in this.state.responses)) {\r\n                        questionlist[x] = true;\r\n                    }\r\n                }\r\n                this.setState({missing: questionlist});\r\n                alert(\"You must answer all questions.\");\r\n            }\r\n        } else if (this.state.curr_stage_id === 4) {\r\n            this.props.saveDictToState({\"Attention Check\": this.state.responses});\r\n            this.setState({curr_stage_id: 0});\r\n            this.props.saveTime(\"Scenario_AttentionCheck_end\");\r\n            this.skipScenario();\r\n        } else {\r\n            if ((Object.keys(this.state.responses).length === 5 * this.state.curr_stage_id) && (Object.keys(this.state.responses).length > 0)) {\r\n                this.setState({curr_stage_id: this.state.curr_stage_id + 1});\r\n                this.props.saveTime(\"Scenario\" + this.state.curr_scenario_id + \"_\" + this.state.curr_stage_id + \"_end\");\r\n            } else {\r\n                let questionlist = {...defaultQuestionStatus};\r\n                for (const x of this.state.questions[this.state.stages[this.state.curr_stage_id]]) {\r\n                    if (!(x in this.state.responses)) {\r\n                        questionlist[x] = true;\r\n                    }\r\n                }\r\n                this.setState({missing: questionlist});\r\n                alert(\"You must answer all questions.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    skipScenario() {\r\n        if (this.state.onlyCars) {\r\n            this.props.skipStage();\r\n        } else {\r\n            if (this.state.curr_scenario_id === 3) {\r\n                this.props.skipStage();\r\n            } else {\r\n                let scenario_id = this.state.curr_scenario_id + 1;\r\n                let new_scenario = this.state.scenarioOrder[scenario_id];\r\n                let new_scenarioText = fullScenarios[this.props.agent][new_scenario]\r\n                this.setState({curr_scenario_id: scenario_id});\r\n                this.setState({scenario: new_scenario});\r\n                this.setState({scenarioText: new_scenarioText});\r\n                this.setState({responses: {}});\r\n                this.setState({missing: defaultQuestionStatus});\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var stage = this.state.stages[this.state.curr_stage_id];\r\n        const introduction_text =\r\n            <main style={{\"paddingTop\": \"5px\"}}>\r\n                {this.state.scenarioText}\r\n            </main>;\r\n\r\n        let content;\r\n        let questionsOrder = this.state.questions[stage];\r\n        let questions;\r\n\r\n        if (stage === \"scenario\") {\r\n            content =\r\n                <div className=\"Scenario\">\r\n                    <div className=\"Subtitle Spotlight\">\r\n                        Imagine that you read the following story in your local newspaper:\r\n                    </div>\r\n                    <div className=\"main\">\r\n                        {introduction_text}\r\n                    </div>\r\n                    <div style={{\"textAlign\": \"right\", \"fontSize\": \"10pt\"}}>\r\n                        {this.state.curr_scenario_id + 1}/4\r\n                    </div>\r\n                    <hr/>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.skipIntro}>Next</Button>\r\n                    </div>\r\n                </div>\r\n        } else if (stage === \"responsibility\") {\r\n            questions = scenarioQuestions[stage][this.props.agent][this.state.scenario];\r\n            content =\r\n                <div className=\"Scenario\">\r\n                    <div className=\"Subtitle Spotlight\">\r\n                        Imagine that you read the following story in your local newspaper:\r\n                    </div>\r\n                    <div className=\"main\">\r\n                        {introduction_text}\r\n                    </div>\r\n                    <div style={{\"textAlign\": \"right\", \"fontSize\": \"10pt\"}}>\r\n                        {this.state.curr_scenario_id + 1}/4\r\n                    </div>\r\n                    <hr/>\r\n                    <div className=\"Spotlight Subtitle\">\r\n                        Regarding the scenario presented above, please answer the following questions.\r\n                    </div>\r\n                    <div style={{\"margin\": \"5px\"}}>\r\n                        {questionsOrder.map((qType, qIdx) => (\r\n                            (qType === \"Blame\") ?\r\n                            <div key={this.state.scenario + stage + qIdx} className=\"QuestionMargin\">\r\n                                <div className=\"Question\" key={qIdx}>\r\n                                    {questions[qType]}<span className={\"Reminder \" + (this.state.missing[qType] ? `${qType}Reminder` : \"\")}>*</span>\r\n                                </div>\r\n                                <div>\r\n                                    {blameOptions.map((option, opIdx) => (\r\n                                        <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                        <input key={opIdx} type=\"radio\" name={this.state.scenario + qType} value={option} onClick={() => this.saveResponseToState(qType, option)}/>\r\n                                        <label style={{\"display\": \"block\"}}>\r\n                                            {option}\r\n                                        </label>\r\n                                    </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div key={this.state.scenario + stage + qIdx} className=\"QuestionMargin\">\r\n                                <div className=\"Question\" key={qIdx}>\r\n                                    {questions[qType]}<span className={\"Reminder \" + (this.state.missing[qType] ? `${qType}Reminder` : \"\")}>*</span>\r\n                                </div>\r\n                                <div>\r\n                                    {responsibilityOptions.map((option, opIdx) => (\r\n                                        <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                        <input key={opIdx} type=\"radio\" name={this.state.scenario + qType} value={option} onClick={() => this.saveResponseToState(qType, option)}/>\r\n                                        <label style={{\"display\": \"block\"}}>\r\n                                            {option}\r\n                                        </label>\r\n                                    </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr/>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.skipStage}>Next</Button>\r\n                    </div>\r\n                </div>\r\n        } else if (stage === \"attention\") {\r\n            content =\r\n                <div className=\"Scenario\">\r\n                    <div className=\"Subtitle Spotlight\">\r\n                        Please read the prompt below carefully.\r\n                    </div>\r\n                        <main style={{\"paddingTop\": \"5px\"}}>\r\n                            Artificial intelligence (AI), sometimes called machine intelligence, is intelligence demonstrated by machines, unlike the natural intelligence displayed by humans and animals.\r\n                            Leading AI textbooks define the field as the study of \"intelligent agents:\" any device that perceives its environment and takes actions that maximize its chance of successfully achieving its goals.\r\n                            If you have been paying attention, please select \"Strongly disagree\" below.\r\n                            Colloquially, the term \"artificial intelligence\" is often used to describe machines (or computers) that mimic \"cognitive\" functions that humans associate with the humans, such as \"learning\" and \"problem solving\".\r\n                        </main>\r\n                    <hr/>\r\n                    <div className=\"Spotlight Question\">\r\n                        To what extent do you agree with the prompt above?\r\n                    </div>\r\n                    <div style={{\"margin\": \"5px\"}}>\r\n                        <div className=\"QuestionMargin\">\r\n                            {sevenPtOptions.map((option, opIdx) => (\r\n                                        <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                            <input key={opIdx} type=\"radio\" name={\"attention\"} value={option} onClick={() => this.saveResponseToState(\"attention\", option)}/>\r\n                                            <label style={{\"display\": \"block\"}}>\r\n                                                {option}\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                        </div>\r\n                    </div>\r\n                    <hr/>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.skipStage}>Next</Button>\r\n                    </div>\r\n                </div>\r\n        } else {\r\n            questions = scenarioQuestions[stage][this.props.agent][this.state.scenario];\r\n            content =\r\n                <div className=\"Scenario\">\r\n                    <div className=\"Subtitle Spotlight\">\r\n                        Imagine that you read the following story in your local newspaper:\r\n                    </div>\r\n                    <div className=\"main\">\r\n                        {introduction_text}\r\n                    </div>\r\n                    <div style={{\"textAlign\": \"right\", \"fontSize\": \"10pt\"}}>\r\n                        {this.state.curr_scenario_id + 1}/4\r\n                    </div>\r\n                    <hr/>\r\n                    <div className=\"Spotlight Subtitle\">\r\n                        Regarding the scenario presented above, to what extent do you agree with the following statements?\r\n                    </div>\r\n                    <div style={{\"margin\": \"5px\"}}>\r\n                        {questionsOrder.map((qType, qIdx) => (\r\n                            <div key={this.state.scenario + stage + qIdx} className=\"QuestionMargin\">\r\n                                <div className=\"Question\" key={qIdx}>\r\n                                    {questions[qType]}<span className={\"Reminder \" + (this.state.missing[qType] ? `${qType}Reminder` : \"\")}>*</span>\r\n                                </div>\r\n                                <div>\r\n                                    {sevenPtOptions.map((option, opIdx) => (\r\n                                        <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                            <input key={opIdx} type=\"radio\" name={this.state.scenario + qType} value={option} onClick={() => this.saveResponseToState(qType, option)}/>\r\n                                            <label style={{\"display\": \"block\"}}>\r\n                                                {option}\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr/>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.skipStage}>Next</Button>\r\n                    </div>\r\n                </div>\r\n        }\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionsScenario\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport QuestionsScenario from './QuestionsScenario.js';\r\nimport { introParagraph } from './Data.js';\r\n\r\nclass Scenarios extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            stages: [\"intro\", \"scenarios\"],\r\n            curr_stage_id: 0,\r\n        }\r\n        this.skipIntro = this.skipIntro.bind(this);\r\n    }\r\n\r\n    skipIntro() {\r\n        this.setState({curr_stage_id: this.state.curr_stage_id + 1});\r\n        this.props.saveTime(\"Scenarios_intro_end\");\r\n    }\r\n\r\n    render() {\r\n        var stage = this.state.stages[this.state.curr_stage_id];\r\n        let content;\r\n        if (stage === \"intro\") {\r\n            content = <div className='Subtitle'>\r\n                            {introParagraph[this.props.agent][0]}\r\n                            <br/>\r\n                            {introParagraph[this.props.agent][1]}\r\n                            <br/>\r\n                            <div className=\"RedSpotlight\">\r\n                            {introParagraph[this.props.agent][2]}\r\n                            </div>\r\n\r\n                            <hr/>\r\n                        <div>\r\n                            <Button variant=\"secondary\" onClick={this.skipIntro}>Next</Button>\r\n                        </div>\r\n                    </div>\r\n        } else {\r\n            content = <QuestionsScenario saveTime={this.props.saveTime} agent={this.props.agent} scenario={this.props.scenario} skipStage={this.props.skipStage} saveDictToState={this.props.saveDictToState}/>\r\n        }\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scenarios\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { demographics } from './Data.js';\r\n\r\nconst defaultQuestionStatus = {\r\n    \"sex\": false,\r\n    \"age\": false,\r\n    \"education\": false,\r\n    \"csKnowledge\": false,\r\n    \"controlQ1\": false,\r\n    \"controlQ2\": false,\r\n    \"controlQ3\": false,\r\n    \"controlQ4\": false,\r\n    \"controlQ5\": false,\r\n    \"controlQ6\": false\r\n};\r\n\r\nclass Demographics extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const shuffle = require('shuffle-array');\r\n        const shuffleQGroups = shuffle(demographics);\r\n        shuffleQGroups.forEach((qGroup) => {\r\n            qGroup.questions = shuffle(qGroup.questions);\r\n        });\r\n        this.state = {\r\n            questionGroups: shuffleQGroups,\r\n            missing: defaultQuestionStatus,\r\n            responses: {},\r\n        }\r\n        this.saveResponseToState = this.saveResponseToState.bind(this);\r\n        this.finalizeStage = this.finalizeStage.bind(this);\r\n    }\r\n\r\n    saveResponseToState(id, response) {\r\n        var tmpResponses = this.state.responses;\r\n        tmpResponses[id] = response;\r\n        this.setState({responses: tmpResponses});\r\n    }\r\n\r\n    finalizeStage() {\r\n        if (Object.keys(this.state.responses).length < 10) {\r\n            let questionlist = {...defaultQuestionStatus};\r\n\r\n            for (const questionGenre of this.state.questionGroups) {\r\n                for (const question of questionGenre.questions) {\r\n                    if (!(question.id in this.state.responses)) {\r\n                        questionlist[question.id] = true;\r\n                    }\r\n                }\r\n            }\r\n            this.setState({missing: questionlist});\r\n            alert(\"You must answer all questions.\");\r\n        } else {\r\n            this.props.saveDictToState({\"Demographics\": this.state.responses});\r\n            this.props.skipStage();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content =\r\n            <div className=\"ControlQuestions\">\r\n                <div className=\"Title\">Let us know a little bit more about yourself.</div>\r\n                <main>\r\n                All the information obtained below will be used solely for research purposes.\r\n                All data will be confidential and will not be made available to anyone outside the research team.\r\n                Results will be published only as aggregate statistics, allowing no inference on any particular individual.\r\n                <br/>\r\n                <hr/>\r\n                </main>\r\n                <div style={{\"margin\": \"10px\"}}>\r\n                    {this.state.questionGroups.map((qGroup, qGroupIdx) => (\r\n                        <div key={qGroup + qGroupIdx}>\r\n                            {qGroup.questions.map((question, questionIdx) => (\r\n                                <div key={question + questionIdx} className=\"QuestionMargin\">\r\n                                    <div className=\"Question\" key={question + questionIdx}>\r\n                                        <span key={question + questionIdx}>{question.text}</span><span className={\"Reminder \" + (this.state.missing[question.id] ? `${question.id}Reminder` : \"\")}>*</span>\r\n                                    </div>\r\n                                    <div key={question + questionIdx + \"_\"}>\r\n                                        {question.options.map((option, opIdx) => (\r\n                                            (question.order === \"horizontal\")?\r\n                                            <div className=\"LikertScale\" style={{\"display\": \"inline-block\"}} key={opIdx}>\r\n                                                <input key={opIdx} type=\"radio\" name={question.id} value={option} onClick={() => this.saveResponseToState(question.id, option)}/>\r\n                                                <label style={{\"display\": \"block\"}}>\r\n                                                    {option}\r\n                                                </label>\r\n                                            </div>\r\n                                            :\r\n                                            <div className=\"LikertScale\" style={{\"textAlign\": \"left\"}} key={opIdx}>\r\n                                                <input key={opIdx} type=\"radio\" name={question.id} value={option} onClick={() => this.saveResponseToState(question.id, option)}/>\r\n                                                <label style={{\"marginLeft\": \"5px\", \"marginTop\": \"0px\", \"marginBottom\": \"0px\"}}>\r\n                                                    {option}\r\n                                                </label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        <hr/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <Button variant=\"secondary\" onClick={this.finalizeStage}>Next</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demographics;\r\n","const config = {\r\n  apiKey: \"AIzaSyBR1kDRHuVAvXe5Ww-QZekReDotNqSr-OA\",\r\n  authDomain: \"pg-mediation.firebaseapp.com\",\r\n  databaseURL: \"https://pg-mediation.firebaseio.com\",\r\n  projectId: \"pg-mediation\",\r\n  storageBucket: \"pg-mediation.appspot.com\",\r\n  messagingSenderId: \"503836429400\",\r\n  appId: \"1:503836429400:web:0c3ed9a01b7705b8d54e2d\"\r\n};\r\n\r\nexport default config;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { treatGroups, scenarios, getRandomItem } from './Data.js'\r\nimport Intro from './Intro.js';\r\nimport POQ from './POQ.js';\r\nimport Scenarios from './Scenarios.js'\r\nimport Demographics from './Demographics.js';\r\nimport Button from 'react-bootstrap/Button';\r\nimport publicIP from 'react-native-public-ip';\r\nimport firebase from 'firebase';\r\nimport config from './config';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const shuffle = require('shuffle-array');\r\n        const queryString = require('query-string');\r\n        const randomTreat = getRandomItem(treatGroups);\r\n        const params = queryString.parse(this.props.location.search);\r\n        this.state = {\r\n            time: {\"init\": new Date()},\r\n            // assignmentId: params.assignmentId,\r\n            // hitId: params.hitId,\r\n            // turkSubmitTo: params.turkSubmitTo,\r\n            // workerId: params.workerId,\r\n            prolificId: params.PROLIFIC_PID,\r\n            scenario: shuffle(scenarios),\r\n            agent: randomTreat.agent,\r\n            stages: [\"intro\", \"POQ\", \"scenario\", \"demographics\", \"end\"],\r\n            curr_stage_id: 2,\r\n            responses: {}\r\n        }\r\n        this.saveDictToState = this.saveDictToState.bind(this);\r\n        this.skipStage = this.skipStage.bind(this);\r\n        this.createForm = this.createForm.bind(this);\r\n        this.saveTime = this.saveTime.bind(this);\r\n        this.saveToFirebase = this.saveToFirebase.bind(this);\r\n        this.redirectToSurveyCompletion = this.redirectToSurveyCompletion.bind(this);\r\n\r\n        firebase.initializeApp(config);\r\n    }\r\n\r\n    saveToFirebase() {\r\n        var allResponses = this.state.responses;\r\n        allResponses.scenario = this.state.scenario;\r\n        allResponses.agent = this.state.agent;\r\n        allResponses.prolificId = this.state.prolificId;\r\n        const times = this.state.time;\r\n        for (var keyTime in times) {\r\n            allResponses[keyTime] = times[keyTime];\r\n        }\r\n        firebase.database().ref(\"/\" + this.state.prolificId).set(allResponses).catch(error => console.log(error)).then(() => this.redirectToSurveyCompletion());\r\n    }\r\n\r\n    componentDidMount() {\r\n        publicIP().then(ip => this.setState({responses: {ip: ip}})).catch(this.setState({responses: {ip: null}}));\r\n    }\r\n\r\n    saveDictToState(dict) {\r\n        var responsesTmp = this.state.responses;\r\n        for (var key in dict) {\r\n            responsesTmp[key] = dict[key];\r\n        }\r\n        this.setState({responses: responsesTmp});\r\n    }\r\n\r\n    skipStage() {\r\n        this.setState({curr_stage_id: this.state.curr_stage_id + 1});\r\n        this.saveTime(\"Stage_\" + this.state.curr_stage_id + \"_end\");\r\n    }\r\n\r\n    saveTime(nameTime) {\r\n        const delta_time = new Date() - this.state.time[\"init\"];\r\n        this.setState({time: {...this.state.time, [nameTime]: delta_time}});\r\n    }\r\n\r\n    createForm() {\r\n        var content = [];\r\n        var allResponses = this.state.responses;\r\n        allResponses.scenario = this.state.scenario;\r\n        allResponses.agent = this.state.agent;\r\n        allResponses.assignmentId = this.state.assignmentId;\r\n        const times = this.state.time;\r\n        for (var keyTime in times) {\r\n            allResponses[keyTime] = times[keyTime];\r\n        }\r\n        var i = 0;\r\n        for (var key in allResponses) {\r\n            content = [...content, <input type=\"hidden\" name={key} value={allResponses[key]} key={key + i}/>];\r\n            i++;\r\n        }\r\n        return content;\r\n    }\r\n\r\n    redirectToSurveyCompletion() {\r\n        let path = 'https://www.google.com/';\r\n        window.open(path, \"_self\");\r\n    }\r\n\r\n    render() {\r\n        var stage = this.state.stages[this.state.curr_stage_id];\r\n        let content;\r\n        if (this.state.assignmentId === \"ASSIGNMENT_ID_NOT_AVAILABLE\") {\r\n            //content = this.createForm();\r\n            content = <Intro skipStage={() => {return true}} Preview={this.state.assignmentId === \"ASSIGNMENT_ID_NOT_AVAILABLE\"}/>;\r\n        } else {\r\n            if (stage === \"intro\") {\r\n                content = <Intro skipStage={this.skipStage} Preview={this.state.assignmentId === \"ASSIGNMENT_ID_NOT_AVAILABLE\"}/>;\r\n            } else if (stage === \"POQ\") {\r\n                content = <POQ skipStage={this.skipStage} saveDictToState={this.saveDictToState}/>;\r\n            } else if (stage === \"scenario\") {\r\n                content = <Scenarios agent={this.state.agent} scenario={this.state.scenario} skipStage={this.skipStage} saveDictToState={this.saveDictToState} saveTime={this.saveTime}/>;\r\n            } else if(stage === \"demographics\") {\r\n                content = <Demographics skipStage={this.skipStage} saveDictToState={this.saveDictToState}/>\r\n            } else if (stage === \"end\") {\r\n                content = <div className=\"VerticalCenter\">\r\n                            <div className=\"Title\">Thank you for participating in our survey!</div>\r\n                            <div className=\"Subtitle\">\r\n                            Please note that all the scenarios presented to you were adapted for research purposes. None of the scenarios reflect real cases, legal decisions, or legal judgments.<br/>\r\n                                If you have any questions, feel free to contact us at ibs.dscig@gmail.com .\r\n                                <hr/>\r\n                            </div>\r\n                            <div className=\"QuestionMargin\">\r\n                                <span className=\"Title Spotlight RedSpotlight\">Click on the button below to complete the survey.</span>\r\n                                <div className=\"QuestionMargin\">\r\n                                    {/* <form action={this.state.turkSubmitTo + \"/mturk/externalSubmit\"} method=\"post\">\r\n                                        {this.createForm()}\r\n                                        <Button variant=\"secondary\" as=\"input\" type=\"submit\" key=\"submitButton\" value=\"Get Reward\"/>\r\n                                    </form> */\r\n                                    <Button variant=\"secondary\" onClick={this.saveToFirebase}>Complete Survey</Button>}\r\n                                </div>\r\n                            </div>\r\n                          </div>;\r\n            } else {\r\n                content = <h1>How did you get here?</h1>\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst routing = (\r\n    <Router>\r\n        <div>\r\n            <Route path=\"/\" component={App}/>\r\n        </div>\r\n    </Router>\r\n);\r\n\r\nReactDOM.render(routing, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}